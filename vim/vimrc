" ~/.vimrc
set nocompatible

" ================ General Config ====================
set autoread                   "Reload files changed outside vim
set backspace=indent,eol,start "Allow backspace in insert mode
set encoding=utf-8
set fileformats+=mac
set gcr=a:blinkon0             "Disable cursor blink
set hidden                     "Better buffer management
set history=1000               "Store lots of :cmdline history
set number                     "Line numbers are good
set shell=$SHELL
set showcmd                    "Show incomplete cmds down the bottom
set showmode                   "Show current mode down the bottom
set scrolloff=7                "Set 7 lines to the cursor - when moving vertically using j/k
set ttimeout
set ttimeoutlen=100
set visualbell                 "No sounds
set exrc
set secure
set nocompatible
set modelines=5
set title                      "Set the title in xterm
set hidden                     "Better buffer management
set hlsearch
set incsearch

" ================ Turn Off Swap Files ==============
set noswapfile
set nobackup
set nowb

" Trailing spaces and tabs
set list
set listchars=tab:>-,trail:*,nbsp:*

let mapleader = ","

" Save files when vim loses focus
au FocusLost * silent! wa

" searching stuff

" Make <C-L> clear highlight and redraw
nnoremap <C-L> :nohls<CR><C-L>
inoremap <C-L> <C-O>:nohls<CR>

" Edit the vimrc file
nmap <leader>ev :tabedit $MYVIMRC<CR>
nmap <leader>evb :tabedit ~/.vimrc.bundles<CR>
nmap <leader>evn :tabedit ~/.vimrc.neocomplete<CR>
nmap <leader>evr :source $MYVIMRC<CR>

" Tab navigation like Chrome
nnoremap <D-[> :tabprevious<CR>
nnoremap <D-]> :tabnext<CR>
nnoremap <D-t> :tabnew<CR>
inoremap <D-[> <Esc>:tabprevious<CR>i
inoremap <D-]> <Esc>:tabnext<CR>i
inoremap <D-t> <Esc>:tabnew<CR>i
nnoremap <D-1> 1gt<CR>
inoremap <D-1> <Esc>1gt<CR>i
nnoremap <D-2> 2gt<CR>
inoremap <D-2> <Esc>2gt<CR>i
nnoremap <D-3> 3gt<CR>
inoremap <D-3> <Esc>3gt<CR>i
nnoremap <D-4> 4gt<CR>
inoremap <D-4> <Esc>4gt<CR>i
nnoremap <D-5> 5gt<CR>
inoremap <D-5> <Esc>5gt<CR>i
nnoremap <D-6> 6gt<CR>
inoremap <D-6> <Esc>6gt<CR>i
nnoremap <D-7> 7gt<CR>
inoremap <D-7> <Esc>7gt<CR>i
nnoremap <D-8> 8gt<CR>
inoremap <D-8> <Esc>8gt<CR>i
nnoremap <D-9> 9gt<CR>
inoremap <D-9> <Esc>9gt<CR>i
nnoremap <D-w> :tabclose<CR>
inoremap <D-w> <Esc>:tabclose<CR>

filetype plugin indent on

" =============== vim-plug Initialization ===============

if has('nvim')
        if filereadable(expand("~/.vimrc.nvimbundles"))
                source ~/.vimrc.nvimbundles
        endif
        if filereadable(expand("~/.vimrc.deocomplete"))
                source ~/.vimrc.deocomplete
        endif
else
        if filereadable(expand("~/.vimrc.bundles"))
                source ~/.vimrc.bundles
        endif
        if filereadable(expand("~/.vimrc.neocomplete"))
                source ~/.vimrc.neocomplete
        endif
endif

" =============== UI ================
" turn syntax highlighting on
syntax enable
colorscheme moriarty

highlight clear LineNr     " Current line number row will have same background color in relative mode
highlight clear SignColumn " SignColumn should match background
set nocursorline           " Highlight current line !!! disabled, runs slow
set hlsearch               " Highlight search results
set ignorecase             " Ignore case when searching
set incsearch              " Makes search act like search in modern browsers
set lazyredraw             " Don't redraw while executing macros (good performance config)
set magic                  " For regular expressions turn magic on
set mat=2                  " How many tenths of a second to blink when matching brackets
set showmatch              " Show matching brackets when text indicator is over them
set showmode               " Display the current mode
set smartcase              " When searching try to be smart about cases
set tabpagemax=15          " Only show 15 tabs
set nobackup
set smarttab
set cursorline

" ================ Completion =======================
set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set complete-=i             "do not scan included files
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.log,.git

" grep
nnoremap <Leader>a :Ack!<Space>
map <leader>a* :Ack!<space><cword><CR>

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" ================ Scrolling ========================
set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" ================ Status Line ======================
if has('cmdline_info')
  set showcmd                 " Show partial commands in status line and
  " Selected characters/lines in visual mode
endif

" NT bindings
map <leader>n :NERDTreeToggle<CR>
map <leader>ntm :NERDTreeMirror<CR>
map <leader>ntc :NERDTreeClose<CR>
map <leader>ntf :NERDTreeFind<CR>

let NERDTreeShowHidden=1
let NERDTreeChDirMode=2
let NERDTreeQuitOnOpen=1

" disable ex mode
:map Q <Nop>

" disable ri check
:map K <Nop>

" Align bindings
" map <leader>a= to :Align = (rather than :Align := )
map <leader>a= :Align =<CR>
map <leader>ah :Align =><CR>
map <leader>a# :Align #<CR>
map <leader>a{ :Align {<CR>
map <leader>A :Align [A-Z].*<CR>:'<,'>s/\s*$//<CR><C-l>
map <leader>= ggVG=<CR>
map <leader>ct :set et <bar> retab<CR>

" Helpers
map <leader>rts %s/\v\s+$//g<CR>
map <leader>srt :!sort<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %

" Haml
map <leader>hs :!haml -c %:p<CR>

" Set minimum window height
set winheight=10

" ctags stuff
set tags=./tags,tags,./TAGS,TAGS

" numbers
set number

" git-gutter
set updatetime=250

" gui stuff
set guioptions-=T
set guioptions-=r
set guioptions-=L

" Movement
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l
nnoremap <A-s> <C-w>s
nnoremap <A-q> <C-w>q
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
"nnoremap <C-l> <C-w>l

" ctrlp
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.log,.git,*/bundle/*
let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'

" fzf
noremap <leader>f :Files<CR>
noremap <leader>gg :Buffers<CR>
noremap <leader>t :Tags<CR>
noremap <leader>l :Lines<CR>

" fugitive
noremap <leader>gb :Gblame<CR>
noremap <leader>go :Gbrowse<CR>

" Wrapped lines goes down/up to next row, rather than next line in file.
noremap j gj
noremap k gk

" fuckups - If I don't let off the shift key quick enough
command! Q :q
command! W :w
command! Wa :wa
command! Wqa :wqa
command! E :e


" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

set shortmess=a

let g:clang_format#style_options = {
      \ "AccessModifierOffset" : -4,
      \ "AllowShortIfStatementsOnASingleLine" : "true",
      \ "AlwaysBreakTemplateDeclarations" : "true",
      \ "Standard" : "C++11"}

set makeprg="make -j9"
nnoremap <Leader>M :make!<CR>

" airline
set laststatus=2
let g:airline#extensions#tabline#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline_left_sep=''
let g:airline_left_alt_sep=''
let g:airline_right_sep=''
let g:airline_right_alt_sep=''

let g:tagbar_type_go = {
      \ 'ctagstype' : 'go',
      \ 'kinds'     : [
      \ 'p:package',
      \ 'i:imports:1',
      \ 'c:constants',
      \ 'v:variables',
      \ 't:types',
      \ 'n:interfaces',
      \ 'w:fields',
      \ 'e:embedded',
      \ 'm:methods',
      \ 'r:constructor',
      \ 'f:functions'
      \ ],
      \ 'sro' : '.',
      \ 'kind2scope' : {
      \ 't' : 'ctype',
      \ 'n' : 'ntype'
      \ },
      \ 'scope2kind' : {
      \ 'ctype' : 't',
      \ 'ntype' : 'n'
      \ },
      \ 'ctagsbin'  : 'gotags',
      \ 'ctagsargs' : '-sort -silent'
      \ }


" go
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_fmt_command = "goimports"

set completeopt=menu

" Signify
highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=29
highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=124 guifg=#af0000
highlight SignifySignChange cterm=bold ctermbg=106  ctermfg=106

if !exists("*s:MkNonExDir")
  " create parent directories on write
  function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
      let dir=fnamemodify(a:file, ':h')
      if !isdirectory(dir)
        call mkdir(dir, 'p')
      endif
    endif
  endfunction
endif

" vim-go config
let g:go_auto_sameids = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:go_list_type = "quickfix"

if has("autocmd")
  augroup filetype_ruby
    autocmd!
    autocmd FileType ruby set tabstop=2|set shiftwidth=2|set expandtab|set autoindent
    autocmd FileType ruby set wrapscan|set textwidth=120
    autocmd FileType ruby nmap <leader>rs :!ruby -c %:p<CR>
    autocmd FileType ruby nmap <leader>r19 :s/\v:([0-9a-z_]+)\s+\=\>\s+/\1: /g<CR>
    autocmd FileType ruby nmap <leader>r18 :s/\v([0-9a-z_"']+):\s+(.*)/:\1 => \2/g<CR>
    autocmd BufNewFile,BufRead Berksfile set filetype=ruby
    autocmd FileType ruby set colorcolumn=120|highlight ColorColumn ctermbg=DarkGrey guibg=DarkGrey
  augroup END

  augroup filetype_gitcommit
    autocmd FileType gitcommit set colorcolumn=72|highlight ColorColumn ctermbg=DarkGrey guibg=DarkGrey
    autocmd FileType gitcommit set tabstop=2|set shiftwidth=2|set expandtab|set autoindent
  augroup END

  augroup straggelers
    autocmd!
    " remove trailing spaces
    autocmd FileType c,cpp,java,php,ruby autocmd BufWritePre <buffer> :%s/\s\+$//e
    " remove trailing whitespace automatically
    autocmd FileType c,cpp,java,php,ruby autocmd BufWritePre <buffer> :set et | retab
  augroup END

  augroup filetype_haml
    autocmd!
    autocmd FileType haml set tabstop=2|set shiftwidth=2|set expandtab|set autoindent
  augroup END

  augroup filetype_json
    autocmd!
    autocmd FileType json set tabstop=2|set shiftwidth=2|set expandtab|set autoindent
  augroup END

  augroup filetype_yaml
    autocmd!
    autocmd FileType yaml set tabstop=2|set shiftwidth=2|set expandtab|set autoindent
  augroup END

  augroup filetype_perl
    autocmd!
    autocmd FileType perl set tabstop=8|set shiftwidth=8|set noexpandtab|set nolist
  augroup END

  augroup filetype_c
    autocmd!
    " map to <Leader>cf in C++ code
    autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
    autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>
    " if you install vim-operator-user
    autocmd FileType c,cpp,objc map <buffer><Leader>x <Plug>(operator-clang-format)
    " Toggle auto formatting:
    nmap <Leader>C :ClangFormatAutoToggle<CR>
  augroup END

  augroup filetype_go
    autocmd!

    autocmd FileType go set tabstop=4|set shiftwidth=2|set expandtab|set autoindent|set nolist

    autocmd FileType go nmap <Leader>dc  <Plug>(go-doc)
    autocmd FileType go nmap <Leader>ce  <Plug>(go-callees)
    autocmd FileType go nmap <Leader>cl  <Plug>(go-callers)
    autocmd FileType go nmap <Leader>cs  <Plug>(go-callstack)
    autocmd FileType go nmap <Leader>d   <Plug>(go-describe)
    autocmd FileType go nmap <Leader>in  <Plug>(go-info)
    autocmd FileType go nmap <Leader>ii  <Plug>(go-implements)
    autocmd FileType go nmap <Leader>r   <Plug>(go-referrers)
    autocmd FileType go nmap <Leader>i   :GoImports<CR>

  augroup END

  augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
  augroup END
endif

" vim-test configuration

let test#strategy = "neovim"
map <Bslash>t :TestFile<CR>
map <Bslash>s :call RunNearestSpec()<CR>
map <Bslash>l :call RunLastSpec()<CR>
map <Bslash>a :call RunAllSpecs()<CR>


" ALE config

let g:ale_emit_conflict_warnings = 1
let g:airline#extensions#ale#enabled = 1
let g:ale_enabled = 1
"let g:ale_fix_on_save = 1
let g:ale_fixers = { 'ruby': [ 'rubocop' ], 'go': [ 'gofmt'] }
let g:ale_linters = {'go': ['gometalinter', 'gofmt']}
let g:ale_go_gometalinter_options = '--fast --tests'
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
"let g:ale_sign_error = '⤫'
"let g:ale_sign_warning = '⚠'
map <leader>rb :ALEFix<CR>
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)
