# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html
from sys import platform
from subprocess import check_output

# Uncomment this to still load settings configured via autoconfig.yml
config.load_autoconfig()

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

config.set('zoom.default', '110%')

config.bind('<Ctrl+n>', 'completion-item-focus next', 'command')
config.bind('<Ctrl+p>', 'completion-item-focus prev', 'command')
config.bind(',e', 'open-editor')

# Encoding to use for the editor.
# Type: Encoding
c.editor.encoding = 'utf-8'

# Hide the window decoration.  This setting requires a restart on
# Wayland.
# Type: Bool
c.window.hide_decoration = False

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '13pt monospace'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = 'bold 13pt monospace'

# Font used for the debugging console.
# Type: QtFont
c.fonts.debug_console = '13pt monospace'

# Font used for the downloadbar.
# Type: Font
c.fonts.downloads = '13pt monospace'

# Font used for the hints.
# Type: Font
c.fonts.hints = 'bold 13pt monospace'

# Font used in the keyhint widget.
# Type: Font
c.fonts.keyhint = '13pt monospace'

# Font used for error messages.
# Type: Font
c.fonts.messages.error = '13pt monospace'

# Font used for info messages.
# Type: Font
c.fonts.messages.info = '13pt monospace'

# Font used for warning messages.
# Type: Font
c.fonts.messages.warning = '13pt monospace'

# Font used for prompts.
# Type: Font
c.fonts.prompts = '13pt sans-serif'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '13pt monospace'

# Always restore open sites when qutebrowser is reopened.
## Type: Bool
c.auto_save.session = True

# How to behave when the last tab is closed.
## Type: String
# Valid values:
# - ignore: Don't do anything.
# - blank: Load a blank page.
# - startpage: Load the start page.
# - default-page: Load the default page.
# - close: Close the window.
c.tabs.last_close = 'close'
# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand


alacritty = "alacritty"
neovim = "nvim"

if platform == "linux" or platform == "linux2":
    alacritty = check_output(['command -v alacritty'],
                         shell=True).decode('ascii').strip()
    neovim = check_output(['command -v nvim'],
                          shell=True).decode('ascii').strip()
else:
    alacritty = "/Applications/Alacritty.app/Contents/MacOS/alacritty"
    neovim = "/usr/local/bin/nvim"

c.editor.command = [alacritty, neovim, "+{line}", "{file}"]
