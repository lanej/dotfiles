#!/bin/bash

# Check if a direction argument is provided
if [ -z "$1" ]; then
	echo "Usage: $0 {up|down|left|right}"
	exit 1
fi

direction=$1

# Get the coordinates of the current window
current_window_coords=$(yabai -m query --windows --window | jq -r '.frame')

current_x=$(echo "$current_window_coords" | jq -r '.x')
current_y=$(echo "$current_window_coords" | jq -r '.y')

# Find the window in the specified direction, favoring floating windows which changed recently
case $direction in
up)
	window=$(yabai -m query --windows | jq -e --argjson current_y "$current_y" \
		'map(select(.frame.y <= $current_y and .["is-floating"] and .["is-visible"])) | sort_by(.frame.y) | .[0]')

	if [ $? -ne 0 ]; then
		window=$(yabai -m query --windows | jq -e --argjson current_y "$current_y" \
			'map(select(.frame.y <= $current_y and .["is-visible"])) | sort_by(.frame.y) | .[0]')
	fi
	;;
down)
	window=$(yabai -m query --windows | jq -e --argjson current_y "$current_y" \
		'map(select(.frame.y > $current_y and .["is-floating"] and .["is-visible"])) | sort_by(.frame.y) | .[-1]')

	if [ $? -ne 0 ]; then
		window=$(yabai -m query --windows | jq -e --argjson current_y "$current_y" \
			'map(select(.frame.y > $current_y and .["is-visible"])) | sort_by(.frame.y) | .[-1]')
	fi
	;;
left)
	window=$(yabai -m query --windows | jq -e --argjson current_x "$current_x" \
		'map(select(.frame.x < $current_x and .["is-floating"] and .["is-visible"])) | sort_by(.frame.x) | .[0]')

	if [ $? -ne 0 ]; then
		window=$(yabai -m query --windows | jq -e --argjson current_x "$current_x" \
			'map(select(.frame.x < $current_x and .["is-visible"])) | sort_by(.frame.x) | .[0]')
	fi
	;;
right)
	window=$(yabai -m query --windows | jq -e --argjson current_x "$current_x" \
		'map(select(.frame.x > $current_x and .["is-floating"] and .["is-visible"])) | sort_by(.frame.x) | .[-1]')

	if [ $? -ne 0 ]; then
		window=$(yabai -m query --windows | jq -e --argjson current_x "$current_x" \
			'map(select(.frame.x > $current_x and .["is-visible"])) | sort_by(.frame.x) | .[-1]')
	fi
	;;
*)
	echo "Invalid direction: $direction"
	echo "Usage: $0 {up|down|left|right}"
	exit 1
	;;
esac

# If a window in the specified direction is found, focus on it
if [ -n "$window" ]; then
	window_id=$(echo "$window" | jq -r '.id')
	yabai -m window --focus "$window_id"
else
	echo "No window found in the $direction direction."
fi
