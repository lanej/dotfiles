#!/bin/bash

alias arc-revision="git log origin/master..HEAD | grep 'Differential Revision' | grep -o \"https://phab\\..*\" | head -n1 | xargs basename 2>/dev/null"
alias arc-update="arc-revision | xargs arc diff --update"
alias c="clear"
alias copy="tr -d '\n' | pbcopy"
alias cpr='copy -r'
alias curl-ttfb='curls -o /dev/null -w "Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} \n"'
alias curls='curl -s'
alias fucking='sudo'
alias g="git"
alias gpr="hub pull-request"
alias gpro='hub pull-request -o'
alias guard='be guard'
alias mt='(bundle-hack check || bundle) && minitest -Itest/ '
alias mytop="vtop -t monokai"
alias nerd='vim +NERDTree'
alias please='sudo'
alias prco='hub pr list | fzf | egrep -o "\d+" | xargs hub pr checkout'
alias pt=papertrail
alias r='be rspec'
alias rake='noglob rake'
alias reshell="exec -l \$SHELL"
alias recomp='echo "Rebuilding zsh completions..." && rm -f ~/.zcompdump* ~/.zsh/cache/zcompdump* 2>/dev/null && (cd ~/.files && make zsh >/dev/null 2>&1) && autoload -Uz compinit && compinit && echo "Completions rebuilt successfully!"'
alias restart='sudo reboot'
alias rff='r --fail-fast'
alias rmr='rm -r'
alias rn='r --next-failure'
alias root='sudo su -'
alias shutdown='sudo halt'
alias sp='source ~/.bash_profile'
alias tfl='tail -Fn30 log/*.log'
alias to_html="w3m -dump -T text/html"
alias todo="todoist add"
alias untar='tar xvfz'
alias v='nvim'
alias vcr='be env VCR_RECORD=all rspec'
alias wip="git add -A >/dev/null && git commit -m \"wip\" >/dev/null && echo \"it good\""
# Set ls options per platform
os_type=$(uname)
if [ "$os_type" = "Linux" ]; then
	alias ls='ls -p --color=auto'
elif [[ "$os_type" =~ 'darwin' ]]; then
	alias ls='ls -Gp'
fi

if command -v xsel >/dev/null; then
	alias pbcopy='xsel --clipboard --input'
	alias pbpaste='xsel --clipboard --output'
elif [ -n "$TMUX" ]; then
	alias pbcopy='tmux loadb -'
	alias pbpaste='tmux saveb'
fi

if command -v bat >/dev/null 2>&1; then
	export BAT_THEME=Nord
	alias cat='bat'

	if [[ "$os_type" == 'darwin' ]]; then
		export MANPAGER="sh -c 'col -b | bat -l man --plain' --pager=always"
	else
		# shellcheck disable=SC2068
		man() { command man $@ | col -b | bat -l man --plain --color=always | less -C; }
	fi

	# shellcheck disable=SC2068
	help() { $@ --help | bat -l help --plain --no-pager -f | less -R; }
fi

if ! command -v tmx >/dev/null 2>&1; then
	alias tmx="tmux attach || tmux new"
fi

if command -v btm >/dev/null 2>&1; then
	alias htop="btm -b"
fi

if command -v eza >/dev/null 2>&1; then
	alias ls='eza'
	alias ll='eza -Gl --smart-group -F auto --icons --git'
	alias lt="eza -g -F auto --icons -T -L 2 --git"
else
	alias ll="ls -alh"
	alias lt='tree -L 1 -C'
fi

fixssh() {
	for key in SSH_AUTH_SOCK SSH_CONNECTION; do
		if (tmux show-environment 2>/dev/null | grep "^${key}" >/dev/null); then
			value=$(tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//")
			export ${key}="${value}"
		fi
	done

	ssh-add -l
}

myip() {
	dig +short myip.opendns.com @resolver1.opendns.com
}

minitest() {
	if [[ ! -s $(which testrbl 2>/dev/null) ]]; then
		gem install testrbl --no-document -qq
	fi

	testrbl "$@"
}

current_version() {
	git tag -l 'v*' | sed -E 's/^v//g' | sort -g | tail -n 1
}

current_semver() {
	git tag -l | egrep '[0-9]+\.[0-9]+\.[0-9]+' | sort -g | tail -n 1
}

next_version() {
	ruby -e "pos = {'major' => 0, 'minor' => 1, 'patch' => 2}.fetch(ARGV[1] || 'patch'); puts ARGV[0].split('.').tap { |vp| vp[pos] = Integer(vp[pos]) + 1 }.join('.')" "$@"
}

f() {
	fzf --height 30% --reverse --bind alt-j:preview-down,alt-k:preview-up --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat {} || cat {}) 2> /dev/null | head -500'
}

fkill() {
	local pids=$(ps aux | sed 1d | fzf -m --reverse --bind alt-j:preview-down,alt-k:preview-up --preview-window=right --preview "echo {} | awk '{ print \$2 }' | xargs pstree || awk '{ print \$2 }'" | awk '{ print $2 }')

	if [ -n "$pids" ]; then
		for pid in $pids; do pstree $pid; done

		echo $pids | xargs kill -s ${1:-"KILL"}
	fi
}

fpstree() {
	local pids=$(ps aux | sed 1d | fzf -m --reverse --bind alt-j:preview-down,alt-k:preview-up --preview-window=right --preview "echo {} | awk '{ print \$2 }' | xargs pstree -g 3 || awk '{ print \$2 }'" | awk '{ print $2 }')

	if [ -n "$pids" ]; then
		for pid in $pids; do pstree $pid; done
	fi
}

fps() {
	sk --reverse --ansi -i -c 'ps -eo user,pid,comm | rg {}' --preview "echo {} | awk '{ print \$2 }' | xargs pstree -w -g 3 | bat -l bash -f"
}

flsof() {
	local pids=$(ps aux | sed 1d | fzf -m --reverse --bind alt-j:preview-down,alt-k:preview-up --preview-window=right --preview "echo {} | awk '{ print \$2 }' | tr -s ' ' ',' | xargs lsof -p")

	if [ ! -z "$pids" ]; then
		echo "$pids" | xargs lsof -p
	fi
}

git_checkout_branch() {
	target=$(git for-each-ref --format='%(refname:short)' --sort=-committerdate refs/heads/ | grep -v 'phabricator' | fzf --reverse --bind alt-j:preview-down,alt-k:preview-up --preview "git diff --stat --summary --color -p $(git symbolic-ref refs/remotes/origin/HEAD --short | xargs git merge-base --fork-point)...{} | delta" --preview-window=right) || return
	git switch "$(echo "$target")"
}

git_search_log() {
	git log --oneline --color=always --decorate --decorate-refs-exclude="tags/$(basename $PWD)*" --decorate-refs-exclude="refs/tags/phabricator/*" --exclude="refs/tags/phabricator/*" | fzf --ansi --reverse +m --tiebreak=index --bind alt-j:preview-down,alt-k:preview-up --preview "git show {+1} --color=always | delta" | awk "{ print \$1 }" | xargs --no-run-if-empty git show
}

i() {
	nvim -R -c ":FzfLua lines"
}

zz() {
    # Prefer skim (sk) if available; fall back to fzf
    if command -v sk >/dev/null 2>&1; then
        # Use skim with preview and reverse layout (without -q for interactive filtering)
        cd "$(_z -l 2>&1 \
            | sed 's/^[0-9,.]* *//' \
            | sk --ansi --reverse \
                 --bind 'ctrl-j:preview-down,ctrl-k:preview-up' \
                 --preview 'eza -HgF --icons -T -L 2 --color=always --git {}' \
                 --preview-window 'right:60%')" || return
    else
        # Reuse your ALT-C opts for fzf for a consistent UI
        cd "$(_z -l 2>&1 \
            | sed 's/^[0-9,.]* *//' \
            | env FZF_DEFAULT_OPTS="${FZF_ALT_C_OPTS}" fzf -q "${_last_z_args}")" || return
    fi
}

gem_releases() {
	gem list --remote "$1" -a | rg "^$1 "
}

alias tn="tmux new"
alias ct="cargo test"
alias rand="od -vAn -N2 -tu2 < /dev/urandom"
alias go="go-hack"
if [ -x "$HOME/.local/bin/just-hack" ]; then
	alias just="just-hack"
fi
alias python="python-hack"
alias ruby="ruby-hack"
alias b='bundle-hack'
alias be='bundle-exec-hack'
alias bi='bundle-hack install'
alias bl='bundle install --local'

phab_diffs() {
	echo "{\"attachments\":{\"projects\":true},\"constraints\": {\"authorPHIDs\": [\"$1\"]}}" | arc call-conduit -- differential.revision.search | jq -r '.response.data | sort_by(.fields.dateModified)  | .[] | "**" + (.fields.dateModified|todate) + "** [" + .fields.title  + "](" + .fields.uri + ") -> " + .fields.status.name + "\n" + .fields.summary' | bat -l md
}

phab_diff() {
	echo "{\"objectIdentifier\":\"$1\"}" | arc call-conduit -- transaction.search | jq -sr '[ .[] | .response.data | .[] | select(.authorPHID | test("PHID-USER")) ] | reverse | group_by(.groupID) | .[] | .[] | { .comments[].content.raw, .fields }' | rg -v '\[\]' | rg --passthru '\{.*\}' -r '' | bat -l md
}

phab_diff() {
	echo "{\"objectIdentifier\":\"$1\"}" | arc call-conduit -- transaction.search | jq -sr '[ .[] | .response.data | .[] | select(.authorPHID | test("PHID-USER")) ] | reverse | group_by(.groupID) | .[] | .[] | { .comments[].content.raw, fields }' | rg -v '\[\]' | rg --passthru '\{.*\}' -r '' | bat -l md
}

alias max-delta=delta --max-line-length=0

git_authors() {
	git authors -e | rg '\s*(\d+)\s+.*<(.*)>' -r '$1,$2' | awk -F, '{ Authors[$2]+=$1 } END { for (author in Authors) { print author","Authors[author] } }' | sort -t, -nk2 | termgraph --color=blue
}

grm() {
	git status | grep deleted | awk '{print $3}' | xargs git rm
}

phab_repo_files() {
	page=$(echo "{\"queryKey\":\"5K12TorDVnuo\"}" | arc call-conduit -- diffusion.repository.search | jq -c '.response.data[].fields.name')
	for repo in $(); do
		result=$(arc call-conduit -- diffusion.filecontentquery <<<"{\"path\":\"$1\",\"repository\":$repo}" 2>/dev/null | jq -ec '.response.filePHID')
		if [ -n "$result" ]; then
			echo "{\"phid\":$result}" | arc call-conduit -- file.download | jq -r '.response' | base64 -d
		fi

	done
}
request-trace() {
	elasticsearch-simplequery -s "$(date --date='14 days ago' +%Y-%m-%d)" -e today request_log "msg.request_uuid:$1" -o - | jq -r '"\(.timestamp)[\(.timestamp/1000|todate)],\(.msg.response.status),\(.msg.request.method),{\(.application_name)}\(.msg.request.url)"' | sort | xsv table
}

api-request-trace() {
	# FIXME: not working
	while getopts ":c:p:" o; do
		case "${o}" in
		c)
			echo "compact"
			;;
		?)
			echo "script usage: $(basename \$0) [-c]" >&2
			exit 1
			;;
		esac
	done
	shift $((OPTIND - 1))

	# query for entry
	entry=$(elasticsearch-simplequery -s "$(date --date='14 days ago' +%Y-%m-%d)" -e today easypost-requestlog "msg.request_uuid:$1" -o -)
	export entry

	# request
	jq -r '"\u001b[36m" + .msg.request.method + " " + .msg.request.url + "\u001b[0m \n" + (.msg.request.headers | to_entries | map("\u001b[34m" + .key + "\u001b[0m: " + .value) | join("\n"))' <<<"$entry"
	jq $2 '.msg.params_full|fromjson?' <<<"$entry"

	echo ""
	# response
	jq -r '"\u001b[36m" +(.msg.response.http_status|tostring) + " [user_id:" + (.msg.user.id|tostring)  + ", network_ms:" + (.msg.network_time_ms|floor|tostring) + ", query_ms: " + (.msg.query_time_ms|floor|tostring) + ", duration_ms:" + (.msg.duration_ms|floor|tostring) + "]\u001b[0m \n" + (.msg.response.headers | to_entries | map("\u001b[34m" + .key + "\u001b[0m: " + .value) | join("\n"))' <<<"$entry"
	jq $2 '.msg.response.body|fromjson?' <<<"$entry"
}

monitor-deploy() {
	kread tail deploy.events | jq -c "select(.msg.service == \"$1\") | { host: .hostname } + .msg | del(.service)"
}

lookup-tracker() {
	curl -s -H "Accept: application/json" "http://localhost:9292/admin/v1/trackers?is_filters=tracking_code+$1" | jq -rc '[.trackers[0,2]] | sort_by(.created_at) | .[] | (.user_id|tostring) + " " + .tracking_code' | xargs bash -c 'curl -s -H "Accept: application/json" -H "X-EasyPost-User-ID: $2" "http://localhost:9292/v1/trackers/$1?user_id=$2" | jq'
}

easypost-exception-tail() {
	kread tail easypost.exception_v1 | jq '{ at: ((.timestamp/1000)|todate) } + .msg'
}

homer-fade() {
	python3 -c "import plotext as plt; path = 'homer.gif'; plt.download(plt.test_gif_url, path); plt.play_gif(path); plt.show(); plt.delete_file(path)"
}

# This function prompts the user for a query and provides the copilot command stdin as context
ask_copilot() {
	prompt="$1"
	command=${2:-"explain"}
	input="$(cat)"
	gh copilot "$command" "$prompt:\n$input"
}

alias p=pulumi
alias k=kubectl

create_task() {
	llm -m llama3.1:8b "Create a Phabricator Task Title, Summary, Description and Acceptance Criteria: $*" | bat -l md --plain -u
}

# TODO: it's about time to organize aliases

op_items() {
	op item list | tail -n +2 | fzf -m | awk '{ print $1 }' | xargs -L 1 op item get
}

op_password() {
	op item list | tail -n +2 | fzf -m | awk '{ print $1 }' | xargs -L 1 op item get --format json | jq -r '.fields[] | select(.id == "password") | .value'
}

podman_container_rmi() {
	podman container ls | fzf | awk '{ print $1 }' | xargs --no-run-if-empty podman container rm
}

open_webui() {
	podman run -d -p 3000:8080 --replace -v open-webui:/app/backend/data --name open-webui --restart always --pull always ghcr.io/open-webui/open-webui:ollama
	open "http://localhost:3000"

}

# Override glow to always use nord style
glow() {
	command glow --style ~/.config/glow/nord.json "$@"
}

# https://github.com/bcspragu/kagi/pull/2
kagi() {
	command kagi "$@" | glow -p -w "$(stty size | awk '{ print $2 }' | xargs -I {} bc --expression='{}-10')"
}

gh-clone() {
	local selected
	local initial_query="${1:-}"

	# Helper function for searching
	_do_search() {
		local query="$1"
		if [ -z "$query" ]; then
			echo "Type a query and press CTRL-R to search"
			return
		fi
		echo "🔍 Searching GitHub for: $query..."
		echo "──────────────────────────────────"
		gh search repos "$query" --limit 100 --json fullName 2>/dev/null | jq -rc ".[] | .fullName" | {
			local results=$(cat)
			if [ -z "$results" ]; then
				echo "❌ Search failed or no results found"
			else
				echo "$results"
				local count=$(echo "$results" | wc -l | tr -d ' ')
				echo "──────────────────────────────────"
				echo "✅ Found $count repositories"
			fi
		}
	}

	# Initial search if query provided
	local initial_results
	if [ -n "$initial_query" ]; then
		initial_results=$(_do_search "$initial_query")
	else
		initial_results="Type a query and press CTRL-R to search"
	fi

	# Use reload-sync for synchronous reload instead of reload
	selected=$(echo "$initial_results" | \
		fzf --ansi \
		--reverse \
		--multi \
		--prompt="GitHub repo> " \
		--header=$'CTRL-R: Search | Wildcards: * | Qualifiers: repo: user: org: language: topic: in:name,description,readme\n─────────────────────────────────────────────────────────────────────────────' \
		--bind='ctrl-r:reload:test -n {q} && (echo "🔍 Searching GitHub for: {q}..." && echo "──────────────────────────────────" && gh search repos {q} --limit 100 --json fullName 2>/dev/null | jq -rc ".[] | .fullName" && echo "──────────────────────────────────") || echo "Type a query and press CTRL-R to search"' \
		--preview='gh repo view {} 2>/dev/null | COLORTERM=truecolor CLICOLOR_FORCE=1 glow --style ~/.config/glow/nord.json || echo "Loading preview..."' \
		--preview-window="right:60%")

	if [ -n "$selected" ]; then
		echo "$selected" | while read -r line; do
			if [[ "$line" == *"/"* ]] && [[ "$line" != *"🔍"* ]] && [[ "$line" != *"✅"* ]] && [[ "$line" != *"❌"* ]] && [[ "$line" != *"───"* ]]; then
				echo "📥 Cloning $line..."
				gh repo clone "$line" ~/src/"$(basename "$line")"
			fi
		done
	fi
}

phab-clone() {
	podman run \
		-v ~/.arcrc:/root/.arcrc \
		-v ~/.config/phab:/root/.config/phab \
		-it --rm docker.cloudsmith.io/easypost/containers/phab-cli:0.5.0 list-repositories |
		jq -r '.name' |
		fzf --reverse -m |
		xargs -n1 -I {} git clone ssh://git@phab.easypo.net:2222/source/{}.git ~/src/{}
}
