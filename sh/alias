#!/bin/sh

alias arc-revision="git log origin/master..HEAD | grep 'Differential Revision' | grep -o \"https://phab\\..*\" | head -n1 | xargs basename 2>/dev/null"
alias arc-update="arc-revision | xargs arc diff --update"
alias c="clear"
alias copy="tr -d '\n' | pbcopy"
alias cpr='copy -r'
alias curls='curl -s'
alias curl-ttfb='curls -o /dev/null -w "Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} \n"'
alias fucking='sudo'
alias gds='GIT_PAGER=cat git diff --stat'
alias g="git"
alias gpr="hub pull-request"
alias gpro='hub pull-request -o'
alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"
alias guard='be guard'
alias mt='(bundle-hack check || bundle) && minitest -Itest/ '
alias mytop="vtop -t monokai"
alias nerd='vim +NERDTree'
alias please='sudo'
alias prco='hub pr list | fzf | egrep -o "\d+" | xargs hub pr checkout'
alias pt=papertrail
alias rake='noglob rake'
alias rba='be rubocop -a'
alias r='be rspec'
alias reado="ssh-reagent $*"
alias reshell="exec -l $SHELL"
alias restart='sudo reboot'
alias rff='r --fail-fast'
alias rmr='rm -r'
alias rn='r --next-failure'
alias root='sudo su -'
alias shutdown='sudo halt'
alias sp='source ~/.bash_profile'
alias tfl='tail -Fn30 log/*.log'
alias tmux='TERM=xterm-256color tmux'
alias todo="todoist add"
alias to_html="w3m -dump -T text/html"
alias untar='tar xvfz'
alias vcr='be env VCR_RECORD=all rspec'
alias v='nvim'
alias wip="git add -A >/dev/null && git commit -m \"wip\" >/dev/null && echo \"it good\""

## Set ls options per platform
if [[ $OSTYPE == 'linux-gnu' ]]; then
  alias ls='ls -p --color=auto'
elif [[ $OSTYPE =~ 'darwin' ]]; then
  alias ls='ls -Gp'
fi

if hash xsel 2>/dev/null; then
  alias pbcopy='xsel --clipboard --input'
  alias pbpaste='xsel --clipboard --output'
elif [[ $TMUX != "" ]]; then
  alias pbcopy='tmux loadb -'
  alias pbpaste='tmux saveb'
fi

if command -v bat >/dev/null; then
  alias cat='bat'
  export MANPAGER="sh -c 'col -bx | bat -l man'"
fi

if ! command -v tmx >/dev/null; then
  alias tmx="tmux attach"
fi

alias ll="ls -alh"
alias lt='tree -L 1 -C'

if command -v exa >/dev/null; then
  alias ls='exa -HgFG --icons --git'
  alias ll="exa -HgFl --icons --header --git"
  alias lt='exa -HgF --icons -T -L 2 --git'
fi

fixssh() {
  for key in SSH_AUTH_SOCK SSH_CONNECTION SSH_CLIENT; do
    if (tmux show-environment 2>/dev/null | grep "^${key}" >/dev/null); then
      value=$(tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//")
      export ${key}="${value}"
    fi
  done

  ssh-add -l
}

myip() {
  echo $(dig +short myip.opendns.com @resolver1.opendns.com)
}

minitest() {
  if [[ ! -s $(which testrbl 2>/dev/null) ]]; then
    gem install testrbl --no-document -qq
  fi

  testrbl "$@"
}

current-version() {
  git tag -l 'v*' | sed -E 's/^v//g' | sort -g | tail -n 1
}

current-semver() {
  git tag -l | egrep '[0-9]+\.[0-9]+\.[0-9]+' | sort -g | tail -n 1
}

next-version() {
  ruby -e "pos = {'major' => 0, 'minor' => 1, 'patch' => 2}.fetch(ARGV[1] || 'patch'); puts ARGV[0].split('.').tap { |vp| vp[pos] = Integer(vp[pos]) + 1 }.join('.')" $@
}

f() {
  fzf --height 30% --reverse --bind alt-j:preview-down,alt-k:preview-up --preview '[[ $(file --mime {}) =~ binary ]] && echo {} is a binary file || (bat {} || cat {}) 2> /dev/null | head -500'
}

fkp() {
  local pids=$(ps -aux | sed 1d | fzf -m --height 30% --reverse --bind alt-j:preview-down,alt-k:preview-up --preview-window=down:60% --preview "echo {} | awk '{ print \$2 }' | xargs pstree -pha || awk '{ print \$2 }'" | awk '{ print $2 }')

  if [ ! -z "$pids" ]; then
    for pid in $pids; do pstree -pha $pid; done

    echo $pids | xargs kill -s ${1:-"KILL"}
  fi
}

git_checkout_branch() {
	target=$(git for-each-ref --format='%(refname:short)' --sort=-committerdate refs/heads/ | grep -v 'phabricator' | fzf --reverse --height 80% --bind alt-j:preview-down,alt-k:preview-up --preview "git diff --stat --summary --color -p $(git merge-base --independent HEAD)^1...{} | delta" --preview-window=right:80%) || return
	git co $(echo "$target")
}

git_search_log() {
	git log --oneline --decorate --decorate-refs-exclude="tags/phabricator/*" --decorate-refs-exclude="tags/$(basename $PWD)*" | fzf --reverse +m --tiebreak=index --bind alt-j:preview-down,alt-k:preview-up --preview "git show {+1} | delta" | awk "{ print \$1 }" | xargs git show
}

i() {
  nvim -R -c ":FzfLua lines"
}

zz() {
	cd "$(_z -l 2>&1 | sed 's/^[0-9,.]* *//' | fzf --reverse --height=30% -q "$_last_z_args")" || exit
}

gem_releases() {
  gem list --remote "$1" -a | rg "^$1 "
}

alias tn="tmux new"
alias ct="cargo test"
alias rand="od -vAn -N2 -tu2 < /dev/urandom"
alias go="go-hack"
alias python="python-hack"
alias ruby="ruby-hack"
alias b='bundle-hack'
alias be='bundle-exec-hack'
alias bi='bundle-hack install'
alias bl='bundle install --local'

phab-diffs() {
	echo "{\"attachments\":{\"projects\":true},\"constraints\": {\"authorPHIDs\": [\"$1\"]}}" | arc call-conduit -- differential.revision.search | jq -r '.response.data | sort_by(.fields.dateModified)  | .[] | "**" + (.fields.dateModified|todate) + "** [" + .fields.title  + "](" + .fields.uri + ") -> " + .fields.status.name + "\n" + .fields.summary'
}

phab-diff() {
	echo "{\"objectIdentifier\":\"$1\"}" | arc call-conduit -- transaction.search | jq -sr '[ .[] | .response.data | .[] | select(.authorPHID | test("PHID-USER")) ] | reverse | group_by(.groupID) | .[] | .[] | { .comments[].content.raw, fields }' | rg -v '\[\]' | rg --passthru '\{.*\}' -r ''| bat -l md
}

alias max-delta=delta --max-line-length=0

git-authors() {
	git authors -e | rg '\s*(\d+)\s+.*<(.*)>' -r '$1,$2' | awk -F, '{ Authors[$2]+=$1 } END { for (author in Authors) { print author","Authors[author] } }' | sort -t, -nk2 | termgraph --color=blue
}
