#!/bin/zsh

if [[ ! -z "${ZSH_PROFILE}" ]]; then
	zmodload zsh/zprof
fi

# NOTE: uncomment for profiling startup performance
# zmodload zsh/datetime
# setopt promptsubst
# PS4='+$EPOCHREALTIME %N:%i> '
# exec 3>&2 2>/tmp/startlog.$$
# setopt xtrace prompt_subst

export PS1=""

# Append history entries as they are typed, not just when the shell exits
setopt inc_append_history
# Record timestamp of command in history
setopt extended_history
# Do not display duplicate commands in history search
setopt hist_find_no_dups
# Ignore duplicate commands in history
setopt hist_ignore_all_dups
# Expire duplicate entries first when trimming history
setopt hist_expire_dups_first
# Ignore commands that start with a space in history
setopt hist_ignore_space
# Disable the 'nomatch' option to allow unmatched patterns to cause an error
unsetopt nomatch
# Disable the 'share_history' option to prevent sharing command history across all sessions
unsetopt share_history
# Disable the 'correct_all' option to prevent automatic correction of all commands
# unsetopt correct_allnsetopt correct_all
 # vi-mode
bindkey -v
# Bind Ctrl+P to move up in history
bindkey '^P' up-history
# Bind Ctrl+N to move down in history
bindkey '^N' down-history
# Bind Ctrl+? to delete the previous character
bindkey '^?' backward-delete-char
# Bind Ctrl+H to delete the previous character
bindkey '^h' backward-delete-char
# Bind Ctrl+W to delete the previous word
bindkey '^w' backward-kill-word
# Bind Ctrl+R to search backward through history incrementally
bindkey '^r' history-incremental-search-backward
# Bind Ctrl+S to search forward through history incrementally
bindkey '^s' history-incremental-search-forward
# Bind Ctrl+E to move to the end of the line
bindkey '^e' end-of-line
# Bind Ctrl+A to move to the beginning of the line
bindkey '^a' beginning-of-line

autoload edit-command-line; zle -N edit-command-line
bindkey -M vicmd v edit-command-line

if type brew &> /dev/null; then
	export PATH="/opt/homebrew/bin:$PATH"
	export PATH="/opt/homebrew/sbin:$PATH"
	source <(brew shellenv)
fi

. "${HOME}/.profile"

# load zsh-autocompletion if present
if [[ -r "${HOME}/.zsh/plugins/zsh-autocompletion/zsh-autocompletion.plugin.zsh" ]]; then
	source "${HOME}/.zsh/plugins/zsh-autocompletion/zsh-autocompletion.plugin.zsh"
elif command -v brew >/dev/null && [[ -r "$(brew --prefix)/share/zsh-autocompletion/zsh-autocompletion.plugin.zsh" ]]; then
	source "$(brew --prefix)/share/zsh-autocompletion/zsh-autocompletion.plugin.zsh"
fi

if command -v fzf >/dev/null; then
	source <(fzf --zsh)

	fzf-directory-widget() {
		local selected_dir
		selected_dir=$(fd --type d 2>/dev/null | fzf) && LBUFFER+="$selected_dir"
		let ret=$?
		zle reset-prompt
		return $ret
	}

	zzz() {
		zz
		let ret=$?
		zle accept-line
		return $ret
	}

	# Bind the function to a key combination, e.g., Ctrl+U
	zle -N fzf-directory-widget
	bindkey '^Y' fzf-directory-widget

	if [ -r "${HOME}/.config/zsh/fzf.zsh" ]; then
		source "${HOME}/.config/zsh/fzf.zsh"

	fi

	if [ -r "${HOME}/.fzf.zsh" ]; then
		source "${HOME}/.fzf.zsh"

	fi

		bindkey '^U' fzf-cd-widget
		bindkey '^O' fzf-file-widget
		zle -N zzz
		bindkey '^B' zzz

	if [[ -r "${HOME}/.local/share/fzf-tab/fzf-tab.plugin.zsh" ]]; then
		source "${HOME}/.local/share/fzf-tab/fzf-tab.plugin.zsh"

		zstyle ':fzf-tab:*' switch-group ',' '.'
		# disable sort when completing `git checkout`
		zstyle ':completion:*:git-checkout:*' sort false
		# set descriptions format to enable group support
		# NOTE: don't use escape sequences (like '%F{red}%d%f') here, fzf-tab will ignore them
		zstyle ':completion:*:descriptions' format '[%d]'
		# set list-colors to enable filename colorizing
		zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
		# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
		zstyle ':completion:*' menu no
		# preview directory's content with eza when completing cd
		zstyle ':fzf-tab:complete:cd:*' fzf-preview 'eza -1 --color=always $realpath'
		# custom fzf flags
		# NOTE: fzf-tab does not follow FZF_DEFAULT_OPTS by default
		zstyle ':fzf-tab:*' fzf-flags --color=fg:1,fg+:2 --bind=tab:accept
		# To make fzf-tab follow FZF_DEFAULT_OPTS.
		# NOTE: This may lead to unexpected behavior since some flags break this plugin. See Aloxaf/fzf-tab#455.
		zstyle ':fzf-tab:*' use-fzf-default-opts yes
		# switch group using `<` and `>`
		zstyle ':fzf-tab:*' switch-group '<' '>'
	fi
fi

# yank to the system clipboard
function vi-yank-xclip {
   zle vi-yank
   echo "$CUTBUFFER" | pbcopy -i
}

zle -N vi-yank-xclip
bindkey -M vicmd 'y' vi-yank-xclip

local load_zsh_autosuggestions=true

# prompt
if command -v purs >/dev/null; then
	function zle-line-init zle-keymap-select {
	  PROMPT=`purs prompt -k "$KEYMAP" -r "$?" --venv "${${VIRTUAL_ENV:t}%-*}"`
	  zle reset-prompt
	}
	zle -N zle-line-init
	zle -N zle-keymap-select

	autoload -Uz add-zsh-hook

	function _prompt_purs_precmd() {
	  purs precmd -s "$SSH_TTY" -h "$HOST" 
	}
	add-zsh-hook precmd _prompt_purs_precmd
elif [[ -d "${HOME}/.oh-my-zsh" ]]; then
	plugins=(zsh-autosuggestions vi-mode)
	typeset -g POWERLEVEL9K_PROMPT_CHAR_OK_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=cyan
	typeset -g POWERLEVEL9K_PROMPT_CHAR_ERROR_{VIINS,VICMD,VIVIS,VIOWR}_FOREGROUND=red
	typeset -g POWERLEVEL9K_PROMPT_CHAR_{OK,ERROR}_VIINS_CONTENT_EXPANSION='$'
	export DISABLE_FZF_AUTO_COMPLETION="true"
	load_zsh_autosuggestions=false

	source "${HOME}/.oh-my-zsh/oh-my-zsh.sh"
	[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
elif command -v starship >/dev/null; then
	eval "$(starship init zsh)"
	[[ -r "${HOME}/.z.zsh" ]] && source "${HOME}/.z.zsh"
else
	export PS1='%F{cyan}%n@%m %F{green}%1~ %F{yellow}âžœ %f'
fi

[[ -r "${HOME}/.local/share/z/z.sh" ]] && source "${HOME}/.local/share/z/z.sh"

if [[ "$load_zsh_autosuggestions" == true ]]; then
	if [[ -r "${HOME}/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
		source "${HOME}/.zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh"
	elif [[ -r "${HOME}/.local/share/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
		source "${HOME}/.local/share/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"
	elif command -v brew >/dev/null && [[ -r "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]]; then
		source "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh"
	fi
fi


autoload -U select-word-style
select-word-style bash

zstyle ':completion:*' completer _expand _complete _ignored _correct _approximate
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

if [ -r ~/.local/share/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
	source ~/.local/share/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

	# ZSH_HIGHLIGHT_STYLES[default]=none
	# ZSH_HIGHLIGHT_STYLES[unknown-token]=fg=009
	# ZSH_HIGHLIGHT_STYLES[reserved-word]=fg=009,standout
	# ZSH_HIGHLIGHT_STYLES[alias]=fg=cyan,bold
	# ZSH_HIGHLIGHT_STYLES[builtin]=fg=cyan,bold
	# ZSH_HIGHLIGHT_STYLES[function]=fg=cyan,bold
	ZSH_HIGHLIGHT_STYLES[command]=fg=blue
	# ZSH_HIGHLIGHT_STYLES[precommand]=fg=white,underline
	# ZSH_HIGHLIGHT_STYLES[commandseparator]=none
	# ZSH_HIGHLIGHT_STYLES[hashed-command]=fg=009
	# ZSH_HIGHLIGHT_STYLES[path]=fg=214,underline
	# ZSH_HIGHLIGHT_STYLES[globbing]=fg=063
	# ZSH_HIGHLIGHT_STYLES[history-expansion]=fg=white,underline
	# ZSH_HIGHLIGHT_STYLES[single-hyphen-option]=none
	# ZSH_HIGHLIGHT_STYLES[double-hyphen-option]=none
	# ZSH_HIGHLIGHT_STYLES[back-quoted-argument]=none
	# ZSH_HIGHLIGHT_STYLES[single-quoted-argument]=fg=063
	# ZSH_HIGHLIGHT_STYLES[double-quoted-argument]=fg=063
	# ZSH_HIGHLIGHT_STYLES[dollar-double-quoted-argument]=fg=009
	# ZSH_HIGHLIGHT_STYLES[back-double-quoted-argument]=fg=009
	# ZSH_HIGHLIGHT_STYLES[assign]=none
fi

# Add custom completions into ~/.zsh/completions/
fpath=(~/.zsh/completions $fpath)

. "${HOME}/.alias"

# FIXME: this shouldn't be necessary
# . "${HOME}/.zlogin"

if command -v direnv >/dev/null; then
	eval "$(direnv hook zsh)"
fi


# Load and initialize the Zsh completion system, caching it in ~/.zcompdump
autoload -Uz compinit && compinit -C

if command -v atuin >/dev/null; then
	eval "$(atuin init zsh)"

	bindkey '^r' atuin-search
fi


if [[ ! -z "${ZSH_PROFILE}" ]]; then
	zprof
fi
