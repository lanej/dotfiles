#!/bin/sh

function fhr() {
	find . -iname "*$**"
}
function rd() {
	rdesktop -g 1400x900 $*
}
function svndif() {
	svn diff --diff-cmd colordiff $* | less
}
function find_in() {
	find . -iname $1 | xargs grep $2 -sl
}

function myip() {
	echo $(dig +short myip.opendns.com @resolver1.opendns.com)
}

function minitest() {
	if [[ ! -s $(rbenv which testrbl 2>/dev/null) ]]; then
		gem install testrbl --no-document -qq
	fi

	testrbl "$@"
}

function git-rebase-style() {
	git rebase -x "git diff HEAD~1 --name-status | egrep -v '^D' | egrep '*.rb' | awk '{print \$2}' | xargs bundle exec rubocop -a --force-exclusion" $1
}

function git-release() {
	git fetch origin -q
	local current_release=$(git tag -l 'v*' | sed -E 's/^v//g' | sort -g | tail -n 1)
	echo "Current release: v$current_release"
	local next_release=v$(($current_release + 1))
	echo "Releasing: $next_release"
	git tag $next_release && git push origin $next_release
	git push origin $next_release:deploy -v
	echo 'deploy with: '
	echo "REVISION=$next_release bundle exec cap production deploy"
}

function cookbooks-version() {
	egrep "version\s+'([0-9\.]+)'" metadata.rb | sed -E 's/version[ ]+//' | cut -d "'" -f2
}

function cookbooks-release() {
	local version=$(cookbooks-version)
	local tag="v$version"
	echo "Releasing: $tag"
	sleep 1
	git tag $tag && git push origin $tag
}

function next-version() {
	ruby -e "pos = {'major' => 0, 'minor' => 1, 'patch' => 2}.fetch(ARGV[1] || 'patch'); puts ARGV[0].split('.').tap { |vp| vp[pos] = Integer(vp[pos]) + 1 }.join('.')" $@
}

function cookbooks-bump() {
	local version=$(cookbooks-version)
	local next_version=$(next-version $version $@)
	echo "Bumping to $next_version"
	sed -E -i '' "s/^version([[:blank:]]+)'[0-9\.]+'/version\1'$next_version'/" metadata.rb
	local actual_version=$(cookbooks-version)

	if [ "$actual_version" = "$next_version" ]; then
		git add metadata.rb && \
			git commit -m "chore(version): $actual_version"
	else
		echo "Failed to bump cookbooks version. Now " $actual_version
	fi
}

# bash
alias restart='sudo reboot'
alias shutdown='sudo halt'
alias apt-get='sudo apt-get'
alias root='sudo su -'
alias sp='source ~/.bash_profile'
alias nerd='vim +NERDTree'

# git
alias g="git"
alias gds='GIT_PAGER=cat git diff --stat'
alias grm="git status | grep deleted | awk '{print \$3}' | xargs git rm"

# ruby
alias b='bundle-hack'
alias bi='bundle-hack install'
alias be='bundle-exec-hack'
alias bl='bundle install --local'
alias guard='be guard'
alias r='be rspec'
alias rff='r --fail-fast'
alias reado="ssh-reagent $*"

alias enw='emacs -nw'
alias pg-start='pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start'
alias pg-stop='pg_ctl -D /usr/local/var/postgres stop -s -m fast'
alias v='vagrant'

alias untar='tar xvfz'
alias tfl='tail -Fn30 log/*.log'
alias c="clear"
alias pt=papertrail
alias fucking='sudo'
alias k='kubectl'

alias rba='bundle exec rubocop -a'

alias curlb='curl -s'
alias curls='curl -svo /dev/null'
alias curlsd='curl -svo /dev/null -H "Fastly-Debug: 1"'
alias curl-ttfb='curls -w "Connect: %{time_connect} TTFB: %{time_starttransfer} Total time: %{time_total} \n"'

## Set ls options per platform
if [[ $OSTYPE == 'linux-gnu' ]]; then
	alias ls='ls -p --color=auto'
elif [[ $OSTYPE =~ 'darwin' ]]; then
	alias ls='ls -Gp'
fi

alias cpr='copy -r'
alias rake='noglob rake'
alias mt='(bundle-hack check || bundle) && minitest -Itest/ '
alias rn='r --next-failure'
alias copy="tr -d '\n' | pbcopy"
alias gpr="hub pull-request"
alias f=fzf
alias e='$EDITOR '
alias ed='eval $EDITORD ${1-"."}'
alias v='eval $VISUAL '
alias vd='eval $VISUALD ${1-"."}'
alias prco='hub pr list | fzf | egrep -o "\d+" | xargs hub pr checkout'
alias rmr='rm -r'
alias lal='ls -alh'
alias t=terraform
alias gpro='hub pull-request -o'
alias lt='tree -L 1 -C'

if hash xsel 2>/dev/null; then
	alias pbcopy='xsel --clipboard --input'
	alias pbpaste='xsel --clipboard --output'
fi
alias to_html="w3m -dump -T text/html"
